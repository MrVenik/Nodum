<div id="draggablezone" class="draggablezone" style="height: @(Height); width:@(Width);">
    <CascadingValue Value="this">
        @ChildContent
    </CascadingValue>

    @if (DraggableWindows.Count > 0)
    {
        @foreach (var window in DraggableWindows.Values)
        {
            if (window.AllowDrag)
            {
                <div @key="window" id="@window.WindowId" class="draggablewindow" style="top: @($"{window.Y}px"); left: @($"{window.X}px");">
                    <div class="draggablewindowheader" onmousedown="draggableWindowHandler.StartDragging(event)">
                        <CascadingValue Value="window">
                            @window.WindowHeader
                        </CascadingValue>
                    </div>
                    <CascadingValue Value="window">
                        @window.WindowContent
                    </CascadingValue>
                </div>
            }
            else
            {
                <div @key="window" id="@window.WindowId" class="draggablewindow" style="top: @($"{window.Y}px"); left: @($"{window.X}px");">
                    <div class="draggablewindowheader" @onmousedown:preventDefault>
                        <CascadingValue Value="window">
                            @window.WindowHeader
                        </CascadingValue>
                    </div>
                    <CascadingValue Value="window">
                        @window.WindowContent
                    </CascadingValue>
                </div>
            }
        }
    }
</div>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    [Parameter]
    public string Height { get; set; }
    [Parameter]
    public string Width { get; set; }
    [Parameter]
    public string Name { get; set; }

    private static DraggableWindow _selectedWindow;

    public static Dictionary<string, DraggableWindow> DraggableWindows { get; } = new Dictionary<string, DraggableWindow>();

    [Microsoft.JSInterop.JSInvokable]
    public static void StartDragWindow(string windowId, double x, double y)
    {
        if (DraggableWindows.TryGetValue(windowId, out DraggableWindow window))
        {
            _selectedWindow = window;

            _selectedWindow.PositionX = x;
            _selectedWindow.PositionY = y;

            _selectedWindow.OnStartDragingWindow?.Invoke(_selectedWindow);
        }
    }

    [Microsoft.JSInterop.JSInvokable]
    public static void DragWindow(double x, double y)
    {
        if (_selectedWindow != null)
        {
            _selectedWindow.PositionX = x;
            _selectedWindow.PositionY = y;

            _selectedWindow?.OnDragingWindow?.Invoke(_selectedWindow);
        }
    }

    [Microsoft.JSInterop.JSInvokable]
    public static void StopDragWindow(double x, double y)
    {
        if (_selectedWindow != null)
        {
            _selectedWindow.PositionX = x;
            _selectedWindow.PositionY = y;

            _selectedWindow.OnStopDragingWindow?.Invoke(_selectedWindow);
            _selectedWindow = null;
        }
    }
}