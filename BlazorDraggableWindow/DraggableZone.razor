@implements IDisposable

@inject DraggableWindowHandler _draggableWIndowHandler



<div id="draggablezone" style="position: relative; height: @(Height); width: @(Width);">
    <CascadingValue Value="this">
        @ChildContent
    </CascadingValue>

    @if (_draggableWIndowHandler.DraggableWindows.Count > 0)
    {
        @foreach (var window in _draggableWIndowHandler.DraggableWindows.Values)
        {
            if (window.AllowDrag)
            {
                <div @key="window" id="@window.WindowId" style="position: absolute;">
                    <div style="cursor: move;" onmousedown="draggableWindowHandler.StartDragging(event)">
                        <CascadingValue Value="window">
                            @window.WindowHeader
                        </CascadingValue>
                    </div>
                    <CascadingValue Value="window">
                        @window.WindowContent
                    </CascadingValue>
                </div>
            }
            else
            {
                <div @key="window" id="@window.WindowId" style="position: absolute;">
                    <div style="cursor: move;" @onmousedown:preventDefault>
                        <CascadingValue Value="window">
                            @window.WindowHeader
                        </CascadingValue>
                    </div>
                    <CascadingValue Value="window">
                        @window.WindowContent
                    </CascadingValue>
                </div>
            }
        }
    }
</div>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    [Parameter]
    public string Height { get; set; }
    [Parameter]
    public string Width { get; set; }
    [Parameter]
    public string Name { get; set; }

    private bool _isRendered = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isRendered = true;
            await _draggableWIndowHandler.Initialize();
        }
    }

    public void AddWindow(DraggableWindow window)
    {
        _draggableWIndowHandler.AddDraggableWindow(window);

        StateHasChanged();
    }

    public void RemoveWindow(DraggableWindow window)
    {
        _draggableWIndowHandler.RemoveDraggableWindow(window);

        if (_isRendered)
        {
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        _isRendered = false;
    }
}