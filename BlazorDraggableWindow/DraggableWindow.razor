@implements IDisposable

@inject IJSRuntime _jsRuntime

@code {
    [CascadingParameter]
    public DraggableZone DraggableZone { get; set; }

    [Parameter]
    public RenderFragment WindowHeader { get; set; }

    [Parameter]
    public RenderFragment WindowContent { get; set; }

    [Parameter]
    public double X { get; set; }

    [Parameter]
    public double Y { get; set; }

    public double PositionX { get; set; }
    public double PositionY { get; set; }

    [Parameter]
    public Action<DraggableWindow> OnStartDragingWindow { get; set; }
    [Parameter]
    public Action<DraggableWindow> OnDragingWindow { get; set; }
    [Parameter]
    public Action<DraggableWindow> OnStopDragingWindow { get; set; }
    [Parameter]
    public Action<DraggableWindow> OnDispose { get; set; }

    [Parameter]
    public bool AllowDrag { get; set; }

    public Guid Guid { get; private set; }

    public string WindowId => $"draggablewindow-{Guid}";

    protected override void OnInitialized()
    {
        if (DraggableZone == null) throw new InvalidOperationException("");

        Guid = Guid.NewGuid();

        DraggableZone.AddWindow(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _jsRuntime.InvokeVoidAsync("draggableWindowHandler.PositionWindow", WindowId, X, Y);
        }
    }

    public void Dispose()
    {
        DraggableZone.RemoveWindow(this);
        OnDispose?.Invoke(this);
    }
}
