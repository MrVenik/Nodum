@if (InputNode is ISingleInputNode singleInputNode)
{
    if (singleInputNode.InputPin.Showed)
    {
        <img id="@singleInputNode.InputPin.ElementId" src="/image/inputnode.png" class="input" @onclick="@(args => OnNodePinClick(args, singleInputNode, 0))">
    }
}
else if (InputNode is ICommutateInputNode commutateInputNode)
{
    if (commutateInputNode.InputPin.Showed)
    {
        <img id="@commutateInputNode.InputPin.ElementId" src="/image/inputnode.png" class="input" @onclick="@(args => OnNodePinClick(args, commutateInputNode, 0))">
    }
}
else if (InputNode is IMultipleInputNode multipleInputNode)
{
    for (int i = 0; i < multipleInputNode.InputPins.Length; i++)
    {

        int index = i;
        if (multipleInputNode.InputPins[index].Showed)
        {
            <div class="node" style="text-align: left">

                <img id="@multipleInputNode.InputPins[index].ElementId" src="/image/inputnode.png" class="input" @onclick="@(args => OnNodePinClick(args, multipleInputNode, index))">
                <label style="font-size: 12px; color: #fff;">Input @index</label>
            </div>
        }
    }
}


@code {
    [Parameter]
    public IInputNode InputNode { get; set; }
    [Parameter]
    public Action<MouseEventArgs, IInputNode, int> OnNodePinClick { get; set; }
}
