<ModalWindow @ref="_modalWindow">
    <div class="modal-window">
        <div class="modal-header">
            <div class="modal-header-element modal-header-text">Create New NodePin</div>
            <div class="modal-header-element" @onclick="() => _modalWindow.Close()">
                <span class="iconify iconify-main" data-icon="mdi:close" data-inline="false"></span>
            </div>
        </div>
        <div class="modal-window-element">
            <div class="modal-window-element-content input-container">
                <div class="node-header-text">Name: </div>
                <input type="text" @bind-value="_nodePinName" />
            </div>
        </div>
        <div class="modal-window-element">
            <div class="modal-window-element-content input-container">
                <div class="node-header-text">IsInput: </div>
                @if (_isInput)
                {
                    <input checked type="checkbox" @bind-value="_isInput" />
                }
                else
                {
                    <input type="checkbox" @bind-value="_isInput" />
                }

            </div>
        </div>
        <div class="modal-window-element">
            <div class="modal-window-element-content input-container">
                <div class="node-header-text">IsOutput: </div>
                @if (_isOutput)
                {
                    <input checked type="checkbox" @bind-value="_isOutput" />
                }
                else
                {
                    <input type="checkbox" @bind-value="_isOutput" />
                }
            </div>
        </div>
        <div class="modal-window-element">
            <div class="modal-window-element-content">
                <button @onclick="@(() => CreateNewNodePin())">Create</button>
            </div>
        </div>
    </div>
</ModalWindow>

@code {
    private Node _currentNode;

    private ModalWindow _modalWindow;

    private string _nodePinName;
    private Type _nodePinType;
    private bool _isInput;
    private bool _isOutput;

    public void Open(Node node)
    {
        _currentNode = node;
        _modalWindow.Open();
    }

    private void CreateNewNodePin()
    {
        if (_currentNode != null)
        {
            bool isInvokeUpdate = _isInput && !_isOutput;
            NodePinOptions options = new NodePinOptions() { IsInput = _isInput, IsOutput = _isOutput, IsInternalInput = _isOutput, IsInternalOutput = _isInput, IsInvokeUpdate = isInvokeUpdate };
            NodePin nodePin = NodePinBuilder.BuildNodePin(_nodePinName, _currentNode, typeof(double), options);

            if (_currentNode.TryAddNodePin(nodePin))
            {
                _currentNode.AddInternalNode(new NodePinNode(nodePin));
            }
        }

        _nodePinName = string.Empty;
        _isInput = false;
        _isOutput = false;
        _modalWindow.Close();
        _currentNode = null;
    }
}
