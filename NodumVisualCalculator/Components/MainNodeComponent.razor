@inject IJSRuntime JSRuntime
@inject NodumCalcService NodumCalcService


<NodeCreatorComponent @ref="_nodeCreator" />
<NodeEditorComponent @ref="_nodeEditor" />
<NodePinCreatorComponent @ref="_nodePinCreator" />

@if (_currentMainNode != null)
{
    <div class="main-node" @onmousemove="DrawMainLine" @ondblclick="StopDrawingMainLine">
        <div class="main-node-header">
            <Dropdown>
                <DropdownTrigger>
                    <div class="main-node-header-element">
                        <span class="iconify iconify-main" data-icon="mdi:menu" data-inline="false"></span>
                    </div>
                </DropdownTrigger>
                <DropdownContent>
                    <DropdownElement HideOnClick="true" OnClick="@((e) => _mainSidebar.OpenOrClose())">
                        Open Nodes List
                    </DropdownElement>
                    <DropdownElement HideOnClick="true" OnClick="@((e) => _nodeCreator.Open())">
                        Create New Node
                    </DropdownElement>
                    <DropdownElement HideOnClick="true" OnClick="@((e) => _nodeEditor.Open(_currentMainNode))">
                        Edit Node
                    </DropdownElement>
                    <DropdownElement HideOnClick="true" OnClick="@((e) => Save())">
                        Save Node
                    </DropdownElement>
                    <DropdownElement HideOnClick="true" Showed="_isEditor" OnClick="@((e) => _nodePinCreator.Open(_currentMainNode))">
                        Add New NodePin
                    </DropdownElement>
                </DropdownContent>
            </Dropdown>

            <div class="main-node-header-element" style="display: @(_currentMainNode == MainNode ? "none" : "block")" @onclick="() => EditNode(MainNode)">
                <span class="iconify iconify-main" data-icon="mdi:arrow-left" data-inline="false"></span>
            </div>
            <div class="main-node-header-element main-node-header-text">@_currentMainNode.Name</div>
            @if (CloseButtonShowed)
            {
                <div class="main-node-header-element" @onclick="() => OnCloseButtonClicked?.Invoke()">
                    <span class="iconify iconify-main" data-icon="mdi:close" data-inline="false"></span>
                </div>
            }
        </div>

        <div class="main-node-body">

            <Sidebar @ref="_mainSidebar">
                @foreach (var group in NodumCalcService.MainProject.BaseNodeGroups)
                {
                    <SidebarTab>
                        <SidebarTabHeader>
                            @group.Key
                        </SidebarTabHeader>
                        <SidebarTabElements>
                            @foreach (var node in group.Value)
                            {
                                @if (node.IsEditable)
                                {
                                    <SidebarTabElement>
                                        <Dropdown>
                                            <DropdownTrigger>
                                                @node.Name
                                            </DropdownTrigger>
                                            <DropdownContent>
                                                <DropdownElement HideOnClick="true" OnClick="@((e) => _nodeCreator.Open(_currentMainNode, new ExpressionNode(node)))">
                                                    Create
                                                </DropdownElement>
                                                <DropdownElement HideOnClick="true" OnClick="@((e) => EditNode(node))">
                                                    Edit
                                                </DropdownElement>
                                            </DropdownContent>
                                        </Dropdown>
                                    </SidebarTabElement>
                                }
                                else
                                {
                                    <SidebarTabElement OnClick="@((e) => _nodeCreator.Open(_currentMainNode, node.Clone()))">
                                        @node.Name
                                    </SidebarTabElement>
                                }
                            }
                        </SidebarTabElements>
                    </SidebarTab>

                }
                @foreach (var group in NodumCalcService.MainProject.NodeGroups)
                {
                    <SidebarTab>
                        <SidebarTabHeader>
                            @group.Key
                        </SidebarTabHeader>
                        <SidebarTabElements>
                            @foreach (var node in group.Value)
                            {
                                @if (node.IsEditable)
                                {
                                    <SidebarTabElement>
                                        <Dropdown>
                                            <DropdownTrigger>
                                                @node.Name
                                            </DropdownTrigger>
                                            <DropdownContent>
                                                <DropdownElement HideOnClick="true" OnClick="@((e) => _nodeCreator.Open(_currentMainNode, new ExpressionNode(node)))">
                                                    Create
                                                </DropdownElement>
                                                <DropdownElement HideOnClick="true" OnClick="@((e) => EditNode(node))">
                                                    Edit
                                                </DropdownElement>
                                            </DropdownContent>
                                        </Dropdown>
                                    </SidebarTabElement>
                                }
                                else
                                {
                                    <SidebarTabElement OnClick="@((e) => _nodeCreator.Open(_currentMainNode, node.Clone()))">
                                        @node.Name
                                    </SidebarTabElement>
                                }
                            }
                        </SidebarTabElements>
                    </SidebarTab>

                }
            </Sidebar>

            @foreach (var node in _currentMainNode.InternalNodes)
            {
                foreach (var pin in node.AllInputNodePins)
                {
                    if (pin.IncomingNodePin != null)
                    {
                        <svg x="0" y="0" width="100%" height="100%" style="position: absolute; top: 0; left: 0; z-index: 0;">
                            <defs>
                                <linearGradient id="grad1" x1="0%" y1="0%" x2="100%" y2="0%">
                                    <stop offset="0%" style="stop-color: green; stop-opacity: 1" />
                                    <stop offset="100%" style="stop-color: red; stop-opacity: 1" />
                                </linearGradient>
                            </defs>
                            <path id="@(pin.GetLineElementId())" class="node-line" fill="none" stroke="url(#grad1)" stroke-width="8" d="M 0, 0" />
                        </svg>
                    }
                }

            }

            <svg id="main-node-line" x="0" y="0" width="100%" height="100%" style="position: absolute; top: 0; left: 0; z-index: 0;">
                <defs>
                    <linearGradient id="grad1" x1="0%" y1="0%" x2="100%" y2="0%">
                        <stop offset="0%" style="stop-color: green; stop-opacity: 1" />
                        <stop offset="100%" style="stop-color: red; stop-opacity: 1" />
                    </linearGradient>
                </defs>
                <path fill="none" stroke="url(#grad1)" stroke-width="3 " d="@_mainLine.Curve" />
            </svg>

            <DraggableZone Height="100%" Width="100%">
                @foreach (var node in _currentMainNode.InternalNodes)
                {
                    <DraggableWindow @key="node" X="@node.PositionX" Y="@node.PositionY" AllowDrag="true" OnDragingWindow="@((w) => OnNodeDragging(w, node))">
                        <WindowHeader>
                            <div class="node-window-header">

                                <Dropdown>
                                    <DropdownTrigger>
                                        <div class="node-window-header-element">
                                            <span class="iconify iconify-small" data-icon="mdi:menu" data-inline="false"></span>
                                        </div>
                                    </DropdownTrigger>
                                    <DropdownContent>
                                        <DropdownElement HideOnClick="true" OnClick="@((e) => _nodeEditor.Open(node))">
                                            Edit Node
                                        </DropdownElement>
                                        <DropdownElement HideOnClick="true" OnClick="@((e) => EditNode(node))">
                                            Debug Node
                                        </DropdownElement>
                                    </DropdownContent>
                                </Dropdown>

                                <div class="node-window-header-element node-window-header-text">@node.Name (@node.PositionX, @node.PositionY)</div>
                                <div class="node-window-header-element" @onclick="@(() => CloseNode(node))">
                                    <span class="iconify iconify-small" data-icon="mdi:close" data-inline="false"></span>
                                </div>
                            </div>
                        </WindowHeader>
                        <WindowContent>
                            <div class="node-window">
                                <NodeComponent Node="@node" OnNodePinSelect="@((a, n) => OnNodePinSelect(a, n))" OnNodePinConnect="@((a, n) => OnNodePinConnect(a, n))" />
                            </div>
                        </WindowContent>
                    </DraggableWindow>
                }
            </DraggableZone>


        </div>
    </div>
}

@code {
    [Parameter]
    public Node MainNode { get; set; }
    [Parameter]
    public bool CloseButtonShowed { get; set; }
    [Parameter]
    public Action OnCloseButtonClicked { get; set; }

    private bool _isEditor = false;

    private Node _currentMainNode;

    private NodePin _selectedNodePin;

    private Sidebar _mainSidebar;

    private NodeCreatorComponent _nodeCreator;
    private NodeEditorComponent _nodeEditor;
    private NodePinCreatorComponent _nodePinCreator;

    private Line _mainLine = new Line();
    private bool _isMainLineDrawing = false;

    protected override void OnInitialized()
    {
        _currentMainNode = MainNode;
    }

    private void Save()
    {
        NodumCalcService.Save();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //TODO: Create normal method to update lines when something changes
        await UpdateLines();
    }

    private void OnNodePinSelect(MouseEventArgs args, NodePin nodePin)
    {
        _mainLine.FromX = args.ClientX;
        _mainLine.FromY = args.ClientY;

        _isMainLineDrawing = true;

        _selectedNodePin = nodePin;
    }

    private async void OnNodePinConnect(MouseEventArgs args, NodePin nodePin)
    {
        StopDrawingMainLine(args);

        nodePin.AddIncomingNodePin(_selectedNodePin);

        StateHasChanged();
    }

    private void DrawMainLine(MouseEventArgs args)
    {
        if (_isMainLineDrawing)
        {
            _mainLine.ToX = args.ClientX;
            _mainLine.ToY = args.ClientY;
        }
    }

    private void StopDrawingMainLine(MouseEventArgs args)
    {
        if (_isMainLineDrawing)
        {
            _isMainLineDrawing = false;
            _mainLine = new Line();
        }
    }

    private async Task UpdateLines()
    {
        await JSRuntime.InvokeVoidAsync("nodeLineHandler.UpdateLines");
    }

    private void CloseNode(Node node)
    {
        _currentMainNode.RemoveInternalNode(node);

        node.Close();

        StateHasChanged();
    }

    private async void EditNode(Node node = null)
    {
        if (node != null && node != MainNode)
        {
            _isEditor = true;
            _currentMainNode = node;
        }
        else
        {
            _isEditor = false;
            _currentMainNode = MainNode;
        }

        StateHasChanged();
    }

    private void OnNodeDragging(DraggableWindow nodeWindow, Node node)
    {
        node.PositionX = nodeWindow.PositionX;
        node.PositionY = nodeWindow.PositionY;

        //StateHasChanged();
    }
}
