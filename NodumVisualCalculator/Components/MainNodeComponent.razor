@if (_currentMainNode != null)
{
    <div class="main-node" @onmousemove="DrawMainLine">
        <div class="main-node-header">
            <div class="main-node-header-left-buttons">
                <img class="main-node-header-button" src="/image/OptionsButton.png">
            </div>
            <div class="main-node-header-text">@_currentMainNode.Name</div>
            <div class="main-node-header-right-buttons">
                <img class="main-node-header-button" src="/image/CloseButton.png">
            </div>
        </div>

        @foreach (var line in _allLines)
        {
            <svg x="0" y="0" width="100%" height="100%" style="position: absolute; top: 0; left: 0; z-index: -1;">
                <path fill="none" stroke="red" stroke-width="8" d="@line.Curve" />
            </svg>
        }

        <svg x="0" y="0" width="100%" height="100%" style="position: absolute; top: 0; left: 0; z-index: -1;">
            <path fill="none" stroke="red" stroke-width="3" d="@_mainLine.Curve" />
        </svg>

        <DraggableZone Height="100%" Width="100%">
            @foreach (var visualNode in _currentMainNode.VisualNodes)
            {
                <DraggableWindow @key="visualNode" X="@visualNode.Position.X" Y="@visualNode.Position.Y" AllowDrag="true" OnDragingWindow="@((e, w) => OnNodeDragging(e, w, visualNode))">
                    <WindowHeader>
                        <div class="node-window-header">
                            <div class="node-window-header-left-buttons">
                                <img class="node-window-header-button" src="/image/OptionsButton.png">
                            </div>
                            <div class="node-window-header-text">@visualNode.Name (@visualNode.Position.X, @visualNode.Position.Y)</div>
                            <div class="node-window-header-right-buttons">
                                <img class="node-window-header-button" src="/image/CloseButton.png" @onclick="@(() => CloseWindow(visualNode))">
                            </div>
                        </div>
                    </WindowHeader>
                    <WindowContent>
                        <div class="node-window">
                            <NodeComponent VisualNode="@visualNode" OnNodePinSelect="@((a, n) => OnNodeSelect(a, n))" OnNodePinConnect="@((a, n, i) => OnNodeConnect(a, n, i))" />
                        </div>
                    </WindowContent>
                </DraggableWindow>
            }
        </DraggableZone>
    </div>
}

@code {
    class Line
    {
        public double FromX, FromY, ToX, ToY;

        public string Curve
        {
            get
            {
                string line = string.Empty;
                int x0, y0, x1, y1, x2, y2, x3, y3;

                x0 = (int)FromX;
                y0 = (int)FromY;

                x3 = (int)ToX;
                y3 = (int)ToY;

                x1 = (int)(x0 + ((x3 - x0) / 2.0));
                y1 = y0;

                x2 = (int)(x0 + ((x1 - x0) / 2.0));
                y2 = y3;

                line = $"M {x0}, {y0} C {x1}, {y1} {x2}, {y2} {x3}, {y3}";

                return line;
            }

        }
    }

    [Parameter]
    public VisualNodeHolder MainNode { get; set; }

    private bool _isEditor = false;

    private VisualNodeHolder _currentMainNode;

    private IOutputNode _selectedNode;

    private List<Line> _allLines = new List<Line>();

    private Line _mainLine = new Line();
    private bool _isMainLineDrawing = false;

    protected override void OnInitialized()
    {
        _currentMainNode = MainNode;
        CreateNewAddNode();
    }

    private void OnNodeSelect(MouseEventArgs args, VisualNode visualNode)
    {
        _mainLine = new Line() { FromX = args.ClientX, FromY = args.ClientY };

        _isMainLineDrawing = true;

        if (_isMainLineDrawing)
        {
            _mainLine.ToX = args.ClientX;
            _mainLine.ToY = args.ClientY;
        }

        if (visualNode.Node is IOutputNode outputNode)
        {
            _selectedNode = outputNode;
        }
    }

    private void DrawMainLine(MouseEventArgs args)
    {
        if (_isMainLineDrawing)
        {
            _mainLine.ToX = args.ClientX;
            _mainLine.ToY = args.ClientY;
        }
    }

    private void OnNodeConnect(MouseEventArgs args, VisualNode inputNode, int index)
    {
        _isMainLineDrawing = false;
        _mainLine = new Line();

        if (inputNode.Node is ISingleInputNode singleInputNode)
        {
            singleInputNode.AddIncomingNode(_selectedNode);
        }
        else if (inputNode.Node is ICommutateInputNode commutateInputNode)
        {
            commutateInputNode.AddIncomingNode(_selectedNode);
        }
        else if (inputNode.Node is IMultipleInputNode multipleInputNode)
        {
            multipleInputNode.AddIncomingNode(_selectedNode, index);
        }
    }

    private void CreateNewNodeHolder()
    {
        _currentMainNode.AddNode(new VisualNodeHolder("New Node Holder", _currentMainNode));
    }

    private void CreateNewNumberNode()
    {
        _currentMainNode.AddNode(new VisualNode(new InputDoubleNode("Number"), _currentMainNode));
    }

    private void CreateNewAddNode()
    {
        _currentMainNode.AddNode(new VisualNode(new DoubleAddFuncNode("Add"), _currentMainNode));
    }

    private void CloseWindow(IVisualNode window)
    {
        _currentMainNode.RemoveNode(window);

    }

    private void OnNodeStartDragging(MouseEventArgs args, DraggableWindow nodeWindow, INode node)
    {

    }

    private void OnNodeDragging(MouseEventArgs args, DraggableWindow nodeWindow, IVisualNode node)
    {
        node.Position.X = nodeWindow.Offset.Left;
        node.Position.Y = nodeWindow.Offset.Top;
    }
}
