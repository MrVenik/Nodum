@if (VisualNodePin != null && VisualNodePin.NodePin != null)
{
    if (VisualNodePin.Showed)
    {
        <div class="node">
            <div class="node-element">
                @if ((VisualNodePin.NodePin.IsInput && !VisualNodePin.IsInternal) || (VisualNodePin.IsInternal && VisualNodePin.NodePin.IsOutput))
                {
                    <div class="node-element-content" @onclick="@(args => OnNodePinConnect(args, VisualNodePin))">
                        <span id="@VisualNodePin.InputElementId" class="iconify iconify-inputpin" data-icon="mdi:circle" data-inline="false"></span>
                    </div>
                }
                <div class="node-element-content input-container">
                    <label>@VisualNodePin.NodePin.Name</label>
                    @if (VisualNodePin.NodePin is NodePin<double> doubleNodePin)
                    {
                        <input type="number" @bind-value="doubleNodePin.Value" />
                    }
                    else if (VisualNodePin.NodePin is NodePin<int> intNodePin)
                    {
                        <input type="number" @bind-value="intNodePin.Value" />
                    }
                    else if (VisualNodePin.NodePin is NodePin<float> floatNodePin)
                    {
                        <input type="number" @bind-value="floatNodePin.Value" />
                    }
                    else if (VisualNodePin.NodePin is NodePin<string> stringNodePin)
                    {
                        <input type="text" @bind-value="stringNodePin.Value" />
                    }
                    else if (VisualNodePin.NodePin.Value is Enum)
                    {
                        <select @onchange="(e) => VisualNodePin.NodePin.Value = Enum.Parse(VisualNodePin.NodePin.ValueType, e.Value as string)">
                            @foreach (var enumValue in Enum.GetValues(VisualNodePin.NodePin.ValueType))
                            {
                                <option>@enumValue.ToString()</option>
                            }
                        </select>
                    }
                </div>

                @if ((VisualNodePin.NodePin.IsOutput && !VisualNodePin.IsInternal) || (VisualNodePin.IsInternal && VisualNodePin.NodePin.IsInput))
                {
                    <div class="node-element-content" @onclick="@(args => OnNodePinSelect(args, VisualNodePin))">
                        <span id="@VisualNodePin.OutputElementId" class="iconify iconify-outputpin" data-icon="mdi:circle" data-inline="false"></span>
                    </div>
                }
            </div>
        </div>
    }
}

@code {
    [Parameter]
    public VisualNodePin VisualNodePin { get; set; }
    [Parameter]
    public Action<MouseEventArgs, VisualNodePin> OnNodePinSelect { get; set; }
    [Parameter]
    public Action<MouseEventArgs, VisualNodePin> OnNodePinConnect { get; set; }
}
