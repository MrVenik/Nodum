@inject IJSRuntime JSRuntime


@if (VisualNode != null)
{
    if (VisualNode.Node is IValueNode<double> doubleValueNode)
    {
        <div class="node">
            @if (VisualNode.InputNodePins.Count > 1)
            {
                for (int i = 0; i < VisualNode.InputNodePins.Count; i++)
                {
                    int index = i;
                    if (VisualNode.InputNodePins[index].Showed)
                    {
                        <div class="node-element">
                            <div class="node-element-content" id="@VisualNode.InputNodePins[index].ElementId" @onclick="@(args => OnNodePinConnect(args, VisualNode, index))">
                                <span class="iconify iconify-inputpin" data-icon="mdi:circle" data-inline="false"></span>
                            </div>
                            <div class="node-element-content">
                                <label style="font-size: 12px; color: #fff;">Input @index</label>
                            </div>
                        </div>
                    }

                }
            }

            <div class="node-element">
                @if (VisualNode.InputNodePins.Count == 1)
                {
                    if (VisualNode.InputNodePins[0].Showed)
                    {
                        <div class="node-element-content" id="@VisualNode.InputNodePins[0].ElementId" @onclick="@(args => OnNodePinConnect(args, VisualNode, 0))">
                            <span class="iconify iconify-inputpin" data-icon="mdi:circle" data-inline="false"></span>
                        </div>
                    }
                }
                <div class="node-element-content input-container">
                    <label>@VisualNode.Name</label>
                    <input type="number" @bind-value="doubleValueNode.Value" />
                </div>
                @if (VisualNode.OutputNodePin.Showed)
                {
                    <div class="node-element-content" id="@VisualNode.OutputNodePin.ElementId" @onclick="@(args => OnNodePinSelect(args, VisualNode))">
                        <span class="iconify iconify-outputpin" data-icon="mdi:circle" data-inline="false"></span>
                    </div>
                }
            </div>
        </div>
    }
}

@code {
    [Parameter]
    public VisualNode VisualNode { get; set; }
    [Parameter]
    public Action<MouseEventArgs, VisualNode> OnNodePinSelect { get; set; }
    [Parameter]
    public Action<MouseEventArgs, VisualNode, int> OnNodePinConnect { get; set; }

    protected override void OnInitialized()
    {
        VisualNode.OutputNodePin.Position.UpdatePosition = () => UpdatePinPosition(VisualNode.OutputNodePin);

        foreach (var pin in VisualNode.InputNodePins)
        {
            pin.Position.UpdatePosition = () => UpdatePinPosition(pin);
        }

    }


    private async void UpdatePinPosition(NodePin pin)
    {
        double elementX = await JSRuntime.InvokeAsync<double>("getElementOffsetLeft", pin.ElementId) + 8;
        double elementY = await JSRuntime.InvokeAsync<double>("getElementOffsetTop", pin.ElementId) + 8;

        pin.Position.X = elementX;
        pin.Position.Y = elementY;
    }
}
