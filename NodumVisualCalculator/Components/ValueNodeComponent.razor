@inject IJSRuntime JSRuntime


@if (VisualNode != null)
{
    if (VisualNode.Node is IValueNode<double> doubleValueNode)
    {
        <div class="node">

            <InputNpdePinComponent VisualNode="@VisualNode" OnNodePinClick="@((a, n, i) => OnNodePinConnect(a, n, i))" />

            <div class="input-container">
                <label>@VisualNode.Name</label>
                <input type="number" @bind-value="doubleValueNode.Value" />
            </div>

            <OutputNodePinComponent VisualNode="@VisualNode" OnNodePinClick="@((a, n) => OnNodePinSelect(a, n))" />
        </div>
    }
}

@code {
    [Parameter]
    public VisualNode VisualNode { get; set; }
    [Parameter]
    public Action<MouseEventArgs, VisualNode> OnNodePinSelect { get; set; }
    [Parameter]
    public Action<MouseEventArgs, VisualNode, int> OnNodePinConnect { get; set; }

    protected override void OnInitialized()
    {
        VisualNode.OutputNodePin.Position.UpdatePosition = () => UpdatePinPosition(VisualNode.OutputNodePin);

        foreach (var pin in VisualNode.InputNodePins)
        {
            pin.Position.UpdatePosition = () => UpdatePinPosition(pin);
        }

    }


    private async void UpdatePinPosition(NodePin pin)
    {
        double elementX = await JSRuntime.InvokeAsync<double>("getElementOffsetLeft", pin.ElementId) + 8;
        double elementY = await JSRuntime.InvokeAsync<double>("getElementOffsetTop", pin.ElementId) + 8;

        pin.Position.X = elementX;
        pin.Position.Y = elementY;
    }
}
